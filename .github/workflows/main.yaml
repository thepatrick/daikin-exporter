name: Push to main
on:
  push:
    branches:
      - main

permissions:
#   actions: read|write|none
#   checks: read|write|none
  contents: write # for SBOM (read|write|none)
#   deployments: read|write|none
#   id-token: read|write|none
#   issues: read|write|none
#   discussions: read|write|none
  packages: write
#   pages: read|write|none
#   pull-requests: read|write|none
#   repository-projects: read|write|none
#   security-events: read|write|none
#   statuses: read|write|none

jobs:
  up:
    name: Package
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.docker_build.outputs.digest }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Docker meta
      id: docker_meta
      uses: crazy-max/ghaction-docker-meta@v5
      with:
        images: ghcr.io/${{ github.repository }} # list of Docker images to use as base name for tags
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha
          type=sha,format=long
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v5
      with:
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.docker_meta.outputs.tags }}
        labels: ${{ steps.docker_meta.outputs.labels }}
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

  github-dependency-graph:
    runs-on: ubuntu-latest
    needs: up
    permissions:
      contents: write # for SBOM (read|write|none)
      packages: read
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run Trivy in GitHub SBOM mode and submit results to Dependency Graph
        uses: aquasecurity/trivy-action@0.19.0
        with:
          format: 'github'
          output: 'dependency-results.sbom.json'
          image-ref: 'ghcr.io/${{ github.repository }}:sha-${{ github.sha }}'
          github-pat: ${{ secrets.GITHUB_TOKEN }} # or ${{ secrets.github_pat_name }} if you're using a PAT

  show-high-vulnerabilities:
    runs-on: ubuntu-latest
    needs: up
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.19.0
      with:
        image-ref: 'ghcr.io/${{ github.repository }}:sha-${{ github.sha }}'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
        output: trivy.txt
    - name: Publish Trivy Output to Summary
      run: |
        if [[ -s trivy.txt ]]; then
          {
            echo "### Security Output"
            echo "<details><summary>Click to expand</summary>"
            echo ""
            echo '```terraform'
            cat trivy.txt
            echo '```'
            echo "</details>"
          } >> $GITHUB_STEP_SUMMARY
        fi

  sign:
    runs-on: ubuntu-latest
    needs: up
    permissions:
      id-token: write
      contents: read
      packages: write
    steps:
      # Install Cosign
      - uses: sigstore/cosign-installer@main

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Cosign the OCI artifact
      - name: Sign the OCI artifact
        run: 'cosign sign ghcr.io/${{github.repository}}@${{needs.up.outputs.digest}} -y'

  syft:
    runs-on: ubuntu-latest
    needs: up
    permissions:
      id-token: write
      packages: write
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: anchore/sbom-action/download-syft@v0

      - name: Create SBOM
        uses: anchore/sbom-action@v0
        with:
          image: 'ghcr.io/${{ github.repository }}:sha-${{ github.sha }}'
          format: spdx-json
          output-file: "${{ github.event.repository.name }}-sbom.spdx.json"

      - name: Scan SBOM
        uses: anchore/scan-action@v3
        with:
          sbom: "${{ github.event.repository.name }}-sbom.spdx.json"

      - uses: anchore/sbom-action/publish-sbom@v0
        with:
          sbom-artifact-match: ".*\\.spdx$"
